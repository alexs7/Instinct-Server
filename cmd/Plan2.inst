// *** Instinct Robot Plan generated by dia/instinctgen.py ***
// *** 2016-02-02 15:16:47 C:\Users\rwortham\Documents\Bath\University\Arduino Robot\Instinct-Dia\Plan2.inst

// *** First, clear the old plan and initialise the buffers ***
PLAN R C
// AP=9, APE=47, C=3, CE=10, D=6, A=29
PLAN R I 9 47 3 10 6 29

// *** These are the Plan Elements. ***

// Start fast Horizontal head scanning
// Action: FastHScan
// 	Parents: MovingSoLook, RTA5, NoScanning, ON2, OA2, TA3, SAS11
//	Action=HScan
//	ActionValue=2500
PLAN A A 40 10 2500

// CompetenceElement: NoScanning
// 	Parents: ForwardAvoiding
// 	Children: FastHScan
//	Priority=1
//	RetryLimit=0
//	Sense=MinRangeAhead
//	Comparator=EQ	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 44 2 40 1 0 20 0 0 0 0

// Action: AheadMedium
// 	Parents: OA1
//	Action=SetSpeed
//	ActionValue=60
PLAN A A 14 1 60

// CompetenceElement: HumanPresent
// 	Parents: CheckForHuman
// 	Children: FoundAHuman
//	Priority=1
//	RetryLimit=0
//	Sense=PIR
//	Comparator=EQ	// EQ, NE, GT, LT, TR, FL
//	SenseValue=1
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 90 89 92 1 0 12 0 1 0 0

// Action: WaitForHumanDetector
// 	Parents: SFH7
//	Action=Wait
//	ActionValue=8000
PLAN A A 87 12 8000

// ActionPattern: ObjectsAround
// 	Parents: FS3
// 	Children: OA2, OA1
PLAN A P 54

// ActionPatternElement: TA4
// 	Parents: TurnAvoid
// 	Children: WaitForScanning
//	Order=4
PLAN A L 47 45 41 4

// ActionPatternElement: TA1
// 	Parents: TurnAvoid
// 	Children: StopHScan
//	Order=1
PLAN A L 57 45 53 1

// ActionPatternElement: TA2
// 	Parents: TurnAvoid
// 	Children: TurnToAvoid
//	Order=2
PLAN A L 46 45 43 2

// ActionPatternElement: TA3
// 	Parents: TurnAvoid
// 	Children: FastHScan
//	Order=3
PLAN A L 58 45 40 3

// Simple Drive that stops the robot by sleeping for a long time if the motors are stalled e.g. by collision. This Drive has the highest possible priority, so cannot be overridden.
// Drive: ProtectMotors
// 	Children: SignalCrashAndSleep
//	Priority=255
//	Sense=MotorCurrent
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=2200
//	SenseHysteresis=2201
//	SenseFlexLatchHysteresis=0
PLAN A D 21 23 255 0 17 2 2200 2201 0 0 0 0

// Action: AheadSlow
// 	Parents: ON1
//	Action=SetSpeed
//	ActionValue=40
PLAN A A 12 1 40

// ActionPatternElement: SCAS5
// 	Parents: SignalCrashAndSleep
// 	Children: Sleep20
//	Order=4
PLAN A L 26 23 22 4

// ActionPatternElement: SCAS4
// 	Parents: SignalCrashAndSleep
// 	Children: LookUp
//	Order=3
PLAN A L 30 23 31 3

// Stop Vertical head scanning
// Action: StopVScan
// 	Parents: SCAS3, SAS3, SFH5
//	Action=VScan
//	ActionValue=0
PLAN A A 29 11 0

// ActionPatternElement: SCAS2
// 	Parents: SignalCrashAndSleep
// 	Children: StopHScan
//	Order=2
PLAN A L 25 23 53 2

// ActionPatternElement: SCAS1
// 	Parents: SignalCrashAndSleep
// 	Children: Stop
//	Order=1
PLAN A L 24 23 13 1

// CompetenceElement: NoHumanPresent
// 	Parents: CheckForHuman
// 	Children: ResetHumanDetector
//	Priority=1
//	RetryLimit=0
//	Sense=PIR
//	Comparator=EQ	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 91 89 93 1 0 12 0 0 0 0

// Raise head to point upwards
// Action: LookUp
// 	Parents: SCAS4
//	Action=VMoveHead
//	ActionValue=90
PLAN A A 31 8 90

// ActionPatternElement: OA2
// 	Parents: ObjectsAround
// 	Children: FastHScan
//	Order=2
PLAN A L 56 54 40 2

// ActionPatternElement: OA1
// 	Parents: ObjectsAround
// 	Children: AheadMedium
//	Order=1
PLAN A L 55 54 14 1

// Activated when I think I've spotted a human
// Drive: DetectHuman
// 	Children: ScanForHuman
//	Priority=200
//	Sense=HumanAhead
//	Comparator=EQ	// EQ, NE, GT, LT, TR, FL
//	SenseValue=1
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A D 76 77 200 0 23 0 1 0 0 0 0 0

// Action: TurnL60
// 	Children: FAH2
//	Action=Turn
//	ActionValue=-60
PLAN A A 102 3 -60

// Drive forward, adjusting speed to free space ahead
// Competence: ForwardSafely
// 	Parents: AheadFree
// 	Children: FS4, FS3, FS2, FS1
//	UseORWithinCEGroup=0
PLAN A C 16 0

// ActionPatternElement: SCAS3
// 	Parents: SignalCrashAndSleep
// 	Children: StopVScan
//	Order=2
PLAN A L 28 23 29 2

// Action: Wait1200
// 	Parents: SAS10
//	Action=Wait
//	ActionValue=1200
PLAN A A 71 12 1200

// Waits until we have a complete vertical scan
// Action: WaitForVScan
// 	Parents: SFH4
//	Action=WaitVScan
//	ActionValue=2
PLAN A A 84 16 2

// Sleep for 20 Seconds
// Action: Sleep20
// 	Parents: SCAS5
//	Action=Sleep
//	ActionValue=20
PLAN A A 22 5 20

// ActionPatternElement: SFH8
// 	Parents: ScanForHuman
// 	Children: CheckForHuman
//	Order=8
PLAN A L 88 77 89 8

// CompetenceElement: FS1
// 	Parents: ForwardSafely
// 	Children: Stop
//	Priority=1
//	Sense=MinRangeAhead
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=450
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 17 16 13 1 0 20 3 450 10 0

// ActionPatternElement: SFH3
// 	Parents: ScanForHuman
// 	Children: VScanHuman
//	Order=3
PLAN A L 80 77 83 3

// CompetenceElement: AheadBlocked
// 	Parents: ForwardAvoiding
// 	Children: ReverseTurnAvoid
//	Priority=2
//	RetryLimit=0
//	Sense=MinRangeAhead
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 4 2 5 2 0 20 2 0 10 0

// Waits until we have a complete scan of the territory ahead
// Action: WaitForScanning
// 	Parents: RTA6, TA4, SAS12
//	Action=WaitHScan
//	ActionValue=0
PLAN A A 41 15 0

// ActionPatternElement: SFH7
// 	Parents: ScanForHuman
// 	Children: WaitForHumanDetector
//	Order=7
PLAN A L 86 77 87 7

// ActionPatternElement: SFH6
// 	Parents: ScanForHuman
// 	Children: LookUpForHuman
//	Order=6
PLAN A L 85 77 82 6

// ActionPatternElement: SFH5
// 	Parents: ScanForHuman
// 	Children: StopVScan
//	Order=5
PLAN A L 101 77 29 5

// ActionPatternElement: SFH4
// 	Parents: ScanForHuman
// 	Children: WaitForVScan
//	Order=4
PLAN A L 81 77 84 4

// ActionPattern: ObjectsNear
// 	Parents: FS2
// 	Children: ON2, ON1
PLAN A P 73

// Check if we have a human in view
// Competence: CheckForHuman
// 	Parents: SFH8
// 	Children: NoHumanPresent, HumanPresent
//	UseORWithinCEGroup=1
PLAN A C 89 1

// Start fast Horizontal head scanning
// Action: StopHScan
// 	Parents: SCAS2, SFH2, SAS2, RTA3, TA1
//	Action=HScan
//	ActionValue=0
PLAN A A 53 10 0

// Start Vertical scan
// Action: VScanHuman
// 	Parents: SFH3
//	Action=VScan
//	ActionValue=1000
PLAN A A 83 11 1000

// Action: AheadFull
// 	Parents: AC2
//	Action=SetSpeed
//	ActionValue=100
PLAN A A 15 1 100

// Sleep for 10 Seconds
// Action: Sleep10
// 	Parents: SAS8
//	Action=Sleep
//	ActionValue=10
PLAN A A 38 5 10

// Lower head to point ahead
// Action: UnfurlHead
// 	Parents: SAS9
//	Action=VMoveHead
//	ActionValue=180
PLAN A A 69 8 180

// Raise head to point to body
// Action: TuckHead
// 	Parents: SAS6
//	Action=VMoveHead
//	ActionValue=60
PLAN A A 63 8 60

// Action: TurnR30
// 	Parents: FAH3
// 	Children: FAH1
//	Action=Turn
//	ActionValue=30
PLAN A A 100 3 30

// ActionPattern: ScanForHuman
// 	Parents: DetectHuman
// 	Children: SFH5, SFH8, SFH7, SFH6, SFH4, SFH3, SFH2, SFH1
PLAN A P 77

// Action: TurnL359
// 	Children: FAH4
//	Action=Turn
//	ActionValue=-359
PLAN A A 103 3 -359

// ActionPatternElement: ON2
// 	Parents: ObjectsNear
// 	Children: FastHScan
//	Order=2
PLAN A L 75 73 40 2

// CompetenceElement: AheadObstacle
// 	Parents: ForwardAvoiding
// 	Children: TurnAvoid
//	Priority=3
//	RetryLimit=0
//	Sense=MinRangeAhead
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=450
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 42 2 45 3 0 20 2 450 10 0

// Point head forwards
// Action: HeadStraight
// 	Parents: SAS4
//	Action=HMoveHead
//	ActionValue=75
PLAN A A 64 7 75

// Action: TurnToAvoid
// 	Parents: TA2
//	Action=TurnToMostOpen
//	ActionValue=1
PLAN A A 43 13 1

// ActionPattern: FoundAHuman
// 	Parents: HumanPresent
// 	Children: FAH5, FAH4, FAH6, FAH3, FAH2, FAH1
PLAN A P 92

// ActionPatternElement: SAS5
// 	Parents: StopAndSleep
// 	Children: Wait1500
//	Order=4
PLAN A L 65 33 66 4

// ActionPatternElement: SAS4
// 	Parents: StopAndSleep
// 	Children: HeadStraight
//	Order=3
PLAN A L 62 33 64 3

// ActionPatternElement: SAS7
// 	Parents: StopAndSleep
// 	Children: Wait1500
//	Order=6
PLAN A L 67 33 66 6

// ActionPatternElement: SAS6
// 	Parents: StopAndSleep
// 	Children: TuckHead
//	Order=5
PLAN A L 61 33 63 5

// ActionPatternElement: SAS1
// 	Parents: StopAndSleep
// 	Children: Stop
//	Order=1
PLAN A L 34 33 13 1

// ActionPatternElement: SAS3
// 	Parents: StopAndSleep
// 	Children: StopVScan
//	Order=2
PLAN A L 37 33 29 2

// ActionPatternElement: SAS2
// 	Parents: StopAndSleep
// 	Children: StopHScan
//	Order=2
PLAN A L 35 33 53 2

// ActionPattern: SignalCrashAndSleep
// 	Parents: ProtectMotors
// 	Children: SCAS4, SCAS5, SCAS3, SCAS2, SCAS1
PLAN A P 23

// If I get too close to an IR reflector, then take avoiding action
// Drive: EmergencyAvoid
// 	Children: ReverseTurnAvoid
//	Priority=250
//	Sense=FrontRange
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=150
//	SenseHysteresis=25
//	SenseFlexLatchHysteresis=0
PLAN A D 72 5 250 0 11 3 150 25 0 0 0 0

// ActionPatternElement: SAS8
// 	Parents: StopAndSleep
// 	Children: Sleep10
//	Order=7
PLAN A L 36 33 38 7

// ActionPattern: StopAndSleep
// 	Parents: Sleep
// 	Children: SAS10, SAS9, SAS7, SAS5, SAS4, SAS6, SAS12, SAS11, SAS8, SAS3, SAS2, SAS1
PLAN A P 33

// Roam around once I can see where I'm going
// Drive: Roam
// 	Children: ForwardAvoiding
//	Priority=100
//	Sense=Sleeping
//	Comparator=EQ	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A D 1 2 100 0 8 0 0 0 0 0 0 0

// ActionPattern: AllClear
// 	Parents: FS4
// 	Children: AC2, AC1
PLAN A P 49

// (NULL)
// ActionPatternElement: FAH6
// 	Parents: FoundAHuman
// 	Children: ResetHumanDetector
//	Order=6
PLAN A L 97 92 93 6

// (NULL)
// ActionPatternElement: FAH5
// 	Parents: FoundAHuman, TurnR180
//	Order=5
PLAN A L 99 0 0 5

// (NULL)
// ActionPatternElement: FAH4
// 	Parents: FoundAHuman, TurnL359
//	Order=4
PLAN A L 98 0 0 4

// (NULL)
// ActionPatternElement: FAH3
// 	Parents: FoundAHuman
// 	Children: TurnR30
//	Order=3
PLAN A L 96 92 100 3

// ActionPatternElement: FAH2
// 	Parents: FoundAHuman, TurnL60
//	Order=2
PLAN A L 95 0 0 2

// ActionPatternElement: FAH1
// 	Parents: FoundAHuman, TurnR30
//	Order=1
PLAN A L 94 0 0 1

// Simple Drive that ensures if we are moving forwards then we are scanning around. It seems like a basic instinct is to look when we are moving.
// Drive: MovingSoLook
// 	Children: FastHScan
//	Priority=245
//	Sense=MovingHScanInterval
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=10000
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A D 39 40 245 0 18 2 10000 0 0 0 0 0

// ActionPatternElement: AC2
// 	Parents: AllClear
// 	Children: AheadFull
//	Order=2
PLAN A L 51 49 15 2

// ActionPatternElement: AC1
// 	Parents: AllClear
// 	Children: SlowHScan
//	Order=1
PLAN A L 50 49 52 1

// CompetenceElement: FS3
// 	Parents: ForwardSafely
// 	Children: ObjectsAround
//	Priority=3
//	Sense=MinRangeAhead
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=1250
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 19 16 54 3 0 20 2 1250 10 0

// CompetenceElement: FS4
// 	Parents: ForwardSafely
// 	Children: AllClear
//	Priority=4
//	Sense=MinRangeAhead
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=2500
//	SenseHysteresis=15
//	SenseFlexLatchHysteresis=0
PLAN A E 20 16 49 4 0 20 2 2500 15 0

// Action: Wait1500
// 	Parents: SAS5, SAS7
//	Action=Wait
//	ActionValue=1500
PLAN A A 66 12 1500

// Action: TurnR180
// 	Children: FAH5
//	Action=Turn
//	ActionValue=180
PLAN A A 104 3 180

// ActionPatternElement: RTA1
// 	Parents: ReverseTurnAvoid
// 	Children: Stop
//	Order=1
PLAN A L 6 5 13 1

// ActionPatternElement: RTA3
// 	Parents: ReverseTurnAvoid
// 	Children: StopHScan
//	Order=3
PLAN A L 53 5 53 3

// ActionPatternElement: RTA2
// 	Parents: ReverseTurnAvoid
// 	Children: MoveBack
//	Order=2
PLAN A L 7 5 10 2

// ActionPatternElement: RTA5
// 	Parents: ReverseTurnAvoid
// 	Children: FastHScan
//	Order=5
PLAN A L 48 5 40 5

// ActionPatternElement: RTA4
// 	Parents: ReverseTurnAvoid
// 	Children: Turn90LorR
//	Order=4
PLAN A L 8 5 11 4

// ActionPatternElement: RTA6
// 	Parents: ReverseTurnAvoid
// 	Children: WaitForScanning
//	Order=6
PLAN A L 9 5 41 6

// Action: Turn90LorR
// 	Parents: RTA4
//	Action=TurnMostOpenDir
//	ActionValue=90
PLAN A A 11 14 90

// Action: Stop
// 	Parents: RTA1, FS1, SFH1, SAS1, SCAS1
//	Action=Stop
//	ActionValue=0
PLAN A A 13 4 0

// ActionPattern: TurnAvoid
// 	Parents: AheadObstacle
// 	Children: TA3, TA1, TA4, TA2
PLAN A P 45

// Action: MoveBack
// 	Parents: RTA2
//	Action=MoveBy
//	ActionValue=-150
PLAN A A 10 2 -150

// Simple Drive that stops the robot periodically when it is near objects. This extends battery life and avoids the robot stopping in open areas when it may be damaged.
// Drive: Sleep
// 	Children: StopAndSleep
//	Priority=5
//	Sense=FrontRange
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=300
//	SenseHysteresis=100
//	SenseFlexLatchHysteresis=0
//	RampIncrement=3
//	UrgencyMultiplier=0
//	RampInterval=1
PLAN A D 32 33 5 0 11 3 300 100 0 3 0 1

// CompetenceElement: AheadFree
// 	Parents: ForwardAvoiding
// 	Children: ForwardSafely
//	Priority=4
//	RetryLimit=0
//	Sense=MinRangeAhead
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=800
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 3 2 16 4 0 20 2 800 10 0

// ActionPatternElement: SAS9
// 	Parents: StopAndSleep
// 	Children: UnfurlHead
//	Order=8
PLAN A L 68 33 69 8

// ActionPatternElement: SAS12
// 	Parents: StopAndSleep
// 	Children: WaitForScanning
//	Order=11
PLAN A L 60 33 41 11

// Reset The Human Detector
// Action: ResetHumanDetector
// 	Parents: NoHumanPresent, FAH6
//	Action=ResetDistTrav
//	ActionValue=0
PLAN A A 93 17 0

// CompetenceElement: FS2
// 	Parents: ForwardSafely
// 	Children: ObjectsNear
//	Priority=2
//	Sense=MinRangeAhead
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=450
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 18 16 73 2 0 20 2 450 10 0

// Drive forward, avoiding objects as they are sensed
// Competence: ForwardAvoiding
// 	Parents: Roam
// 	Children: NoScanning, AheadObstacle, AheadBlocked, AheadFree
//	UseORWithinCEGroup=0
PLAN A C 2 0

// Raise head to point to human
// Action: LookUpForHuman
// 	Parents: SFH6
//	Action=VMoveHead
//	ActionValue=135
PLAN A A 82 8 135

// ActionPatternElement: ON1
// 	Parents: ObjectsNear
// 	Children: AheadSlow
//	Order=1
PLAN A L 74 73 12 1

// ActionPattern: ReverseTurnAvoid
// 	Parents: AheadBlocked, EmergencyAvoid
// 	Children: RTA3, RTA5, RTA6, RTA4, RTA2, RTA1
PLAN A P 5

// Start slow Horizontal head scanning
// Action: SlowHScan
// 	Parents: AC1
//	Action=HScan
//	ActionValue=5000
PLAN A A 52 10 5000

// ActionPatternElement: SAS11
// 	Parents: StopAndSleep
// 	Children: FastHScan
//	Order=10
PLAN A L 59 33 40 10

// ActionPatternElement: SAS10
// 	Parents: StopAndSleep
// 	Children: Wait1200
//	Order=9
PLAN A L 70 33 71 9

// ActionPatternElement: SFH2
// 	Parents: ScanForHuman
// 	Children: StopHScan
//	Order=2
PLAN A L 79 77 53 2

// ActionPatternElement: SFH1
// 	Parents: ScanForHuman
// 	Children: Stop
//	Order=1
PLAN A L 78 77 13 1

// *** Plan Element Names follow ... ***

// Start fast Horizontal head scanning
// Action: FastHScan
PELEM FastHScan=40

// CompetenceElement: NoScanning
PELEM NoScanning=44

// Action: AheadMedium
PELEM AheadMedium=14

// CompetenceElement: HumanPresent
PELEM HumanPresent=90

// Action: WaitForHumanDetector
PELEM WaitForHumanDetector=87

// ActionPattern: ObjectsAround
PELEM ObjectsAround=54

// ActionPatternElement: TA4
PELEM TA4=47

// ActionPatternElement: TA1
PELEM TA1=57

// ActionPatternElement: TA2
PELEM TA2=46

// ActionPatternElement: TA3
PELEM TA3=58

// Simple Drive that stops the robot by sleeping for a long time if the motors are stalled e.g. by collision. This Drive has the highest possible priority, so cannot be overridden.
// Drive: ProtectMotors
PELEM ProtectMotors=21

// Action: AheadSlow
PELEM AheadSlow=12

// ActionPatternElement: SCAS5
PELEM SCAS5=26

// ActionPatternElement: SCAS4
PELEM SCAS4=30

// Stop Vertical head scanning
// Action: StopVScan
PELEM StopVScan=29

// ActionPatternElement: SCAS2
PELEM SCAS2=25

// ActionPatternElement: SCAS1
PELEM SCAS1=24

// CompetenceElement: NoHumanPresent
PELEM NoHumanPresent=91

// Raise head to point upwards
// Action: LookUp
PELEM LookUp=31

// ActionPatternElement: OA2
PELEM OA2=56

// ActionPatternElement: OA1
PELEM OA1=55

// Activated when I think I've spotted a human
// Drive: DetectHuman
PELEM DetectHuman=76

// Action: TurnL60
PELEM TurnL60=102

// Drive forward, adjusting speed to free space ahead
// Competence: ForwardSafely
PELEM ForwardSafely=16

// ActionPatternElement: SCAS3
PELEM SCAS3=28

// Action: Wait1200
PELEM Wait1200=71

// Waits until we have a complete vertical scan
// Action: WaitForVScan
PELEM WaitForVScan=84

// Sleep for 20 Seconds
// Action: Sleep20
PELEM Sleep20=22

// ActionPatternElement: SFH8
PELEM SFH8=88

// CompetenceElement: FS1
PELEM FS1=17

// ActionPatternElement: SFH3
PELEM SFH3=80

// CompetenceElement: AheadBlocked
PELEM AheadBlocked=4

// Waits until we have a complete scan of the territory ahead
// Action: WaitForScanning
PELEM WaitForScanning=41

// ActionPatternElement: SFH7
PELEM SFH7=86

// ActionPatternElement: SFH6
PELEM SFH6=85

// ActionPatternElement: SFH5
PELEM SFH5=101

// ActionPatternElement: SFH4
PELEM SFH4=81

// ActionPattern: ObjectsNear
PELEM ObjectsNear=73

// Check if we have a human in view
// Competence: CheckForHuman
PELEM CheckForHuman=89

// Start fast Horizontal head scanning
// Action: StopHScan
PELEM StopHScan=53

// Start Vertical scan
// Action: VScanHuman
PELEM VScanHuman=83

// Action: AheadFull
PELEM AheadFull=15

// Sleep for 10 Seconds
// Action: Sleep10
PELEM Sleep10=38

// Lower head to point ahead
// Action: UnfurlHead
PELEM UnfurlHead=69

// Raise head to point to body
// Action: TuckHead
PELEM TuckHead=63

// Action: TurnR30
PELEM TurnR30=100

// ActionPattern: ScanForHuman
PELEM ScanForHuman=77

// Action: TurnL359
PELEM TurnL359=103

// ActionPatternElement: ON2
PELEM ON2=75

// CompetenceElement: AheadObstacle
PELEM AheadObstacle=42

// Point head forwards
// Action: HeadStraight
PELEM HeadStraight=64

// Action: TurnToAvoid
PELEM TurnToAvoid=43

// ActionPattern: FoundAHuman
PELEM FoundAHuman=92

// ActionPatternElement: SAS5
PELEM SAS5=65

// ActionPatternElement: SAS4
PELEM SAS4=62

// ActionPatternElement: SAS7
PELEM SAS7=67

// ActionPatternElement: SAS6
PELEM SAS6=61

// ActionPatternElement: SAS1
PELEM SAS1=34

// ActionPatternElement: SAS3
PELEM SAS3=37

// ActionPatternElement: SAS2
PELEM SAS2=35

// ActionPattern: SignalCrashAndSleep
PELEM SignalCrashAndSleep=23

// If I get too close to an IR reflector, then take avoiding action
// Drive: EmergencyAvoid
PELEM EmergencyAvoid=72

// ActionPatternElement: SAS8
PELEM SAS8=36

// ActionPattern: StopAndSleep
PELEM StopAndSleep=33

// Roam around once I can see where I'm going
// Drive: Roam
PELEM Roam=1

// ActionPattern: AllClear
PELEM AllClear=49

// (NULL)
// ActionPatternElement: FAH6
PELEM FAH6=97

// (NULL)
// ActionPatternElement: FAH5
PELEM FAH5=99

// (NULL)
// ActionPatternElement: FAH4
PELEM FAH4=98

// (NULL)
// ActionPatternElement: FAH3
PELEM FAH3=96

// ActionPatternElement: FAH2
PELEM FAH2=95

// ActionPatternElement: FAH1
PELEM FAH1=94

// Simple Drive that ensures if we are moving forwards then we are scanning around. It seems like a basic instinct is to look when we are moving.
// Drive: MovingSoLook
PELEM MovingSoLook=39

// ActionPatternElement: AC2
PELEM AC2=51

// ActionPatternElement: AC1
PELEM AC1=50

// CompetenceElement: FS3
PELEM FS3=19

// CompetenceElement: FS4
PELEM FS4=20

// Action: Wait1500
PELEM Wait1500=66

// Action: TurnR180
PELEM TurnR180=104

// ActionPatternElement: RTA1
PELEM RTA1=6

// ActionPatternElement: RTA3
PELEM RTA3=53

// ActionPatternElement: RTA2
PELEM RTA2=7

// ActionPatternElement: RTA5
PELEM RTA5=48

// ActionPatternElement: RTA4
PELEM RTA4=8

// ActionPatternElement: RTA6
PELEM RTA6=9

// Action: Turn90LorR
PELEM Turn90LorR=11

// Action: Stop
PELEM Stop=13

// ActionPattern: TurnAvoid
PELEM TurnAvoid=45

// Action: MoveBack
PELEM MoveBack=10

// Simple Drive that stops the robot periodically when it is near objects. This extends battery life and avoids the robot stopping in open areas when it may be damaged.
// Drive: Sleep
PELEM Sleep=32

// CompetenceElement: AheadFree
PELEM AheadFree=3

// ActionPatternElement: SAS9
PELEM SAS9=68

// ActionPatternElement: SAS12
PELEM SAS12=60

// Reset The Human Detector
// Action: ResetHumanDetector
PELEM ResetHumanDetector=93

// CompetenceElement: FS2
PELEM FS2=18

// Drive forward, avoiding objects as they are sensed
// Competence: ForwardAvoiding
PELEM ForwardAvoiding=2

// Raise head to point to human
// Action: LookUpForHuman
PELEM LookUpForHuman=82

// ActionPatternElement: ON1
PELEM ON1=74

// ActionPattern: ReverseTurnAvoid
PELEM ReverseTurnAvoid=5

// Start slow Horizontal head scanning
// Action: SlowHScan
PELEM SlowHScan=52

// ActionPatternElement: SAS11
PELEM SAS11=59

// ActionPatternElement: SAS10
PELEM SAS10=70

// ActionPatternElement: SFH2
PELEM SFH2=79

// ActionPatternElement: SFH1
PELEM SFH1=78

// *** Plan output complete. RobotSenses and RobotActions follow ... ***

// Front virtual sensor calculated from (FrontRight + RearRight)/2  - max 420mm
// RobotSense: IR_Right
//	SenseID=14
RSENSE IR_Right=14

// Rear left IR sensor - max 600mm
// RobotSense: IR_RearLeft
//	SenseID=3
RSENSE IR_RearLeft=3

// Ultrasonic range finder mounted on head. 0mm to 5000mm
// RobotSense: RangeFinder
//	SenseID=10
RSENSE RangeFinder=10

// Front right IR sensor - max 600mm
// RobotSense: IR_FrontRight
//	SenseID=1
RSENSE IR_FrontRight=1

// Returns ID of edge nearest to an obstacle (0-3), or 4 if no obstacle detected
// RobotSense: IR_NearestEdge
//	SenseID=16
RSENSE IR_NearestEdge=16

// Rear virtual sensor calculated from (RearRight + RearLeft)/2  - max 420mm
// RobotSense: IR_Rear
//	SenseID=6
RSENSE IR_Rear=6

// Returns 1 if there may be a human ahead of us. This depends on the PIR sensor, the distance to the object ahead, and the distance travelled since we detected the last human. There may be false positives, so we will need to investigate further to be sure.
// RobotSense: HumanAhead
//	SenseID=23
RSENSE HumanAhead=23

// Front virtual sensor calculated from (FrontLeft + RearLeft)/2  - max 420mm
// RobotSense: IR_Left
//	SenseID=13
RSENSE IR_Left=13

// True when at least one full head scan has been completed.
// RobotSense: ScanReady
//	SenseID=21
RSENSE ScanReady=21

// Minimum distance scanned by head. 0 to 5000mm. Only valid when ScanReady is true, otherwise returns zero.
// RobotSense: MinRangeAhead
//	SenseID=20
RSENSE MinRangeAhead=20

// Front virtual sensor calculated from (FrontRight + FrontLeft)/2  - max 420mm
// RobotSense: IR_Front
//	SenseID=5
RSENSE IR_Front=5

// Front left IR sensor - max 600mm
// RobotSense: IR_FrontLeft
//	SenseID=2
RSENSE IR_FrontLeft=2

// Returns vertical scan interval if robot is stopped, zero otherwise.
// RobotSense: StoppedVScanInterval
//	SenseID=19
RSENSE StoppedVScanInterval=19

// Sum of drive motor currents in mA
// RobotSense: MotorCurrent
//	SenseID=17
RSENSE MotorCurrent=17

// 1 if robot is sleeping
// RobotSense: Sleeping
//	SenseID=8
RSENSE Sleeping=8

// Returns ID of corner nearest to an obstacle (0-3), or 4 if no obstacle detected
// RobotSense: IR_NearestCorner
//	SenseID=15
RSENSE IR_NearestCorner=15

// PIR sensor mounted on head. Can sense humans but also sometimes triggers when its moved.
// RobotSense: PIR
//	SenseID=12
RSENSE PIR=12

// Returns horizontal scan interval if robot is moving forwards, zero otherwise.
// RobotSense: MovingHScanInterval
//	SenseID=18
RSENSE MovingHScanInterval=18

// Just a random number 1-100
// RobotSense: Random
//	SenseID=7
RSENSE Random=7

// Rear right IR sensor - max 600mm
// RobotSense: IR_RearRight
//	SenseID=4
RSENSE IR_RearRight=4

// Minimum of IR_FrontLeft, IR_FrontRight and IR_Front
// RobotSense: FrontRange
//	SenseID=11
RSENSE FrontRange=11

// Always returns 50 - Good for testing
// RobotSense: Fifty
//	SenseID=9
RSENSE Fifty=9

// Waits until there is vertical scan data in column defined by ActionValue
// RobotAction: WaitVScan
//	ActionID=16
RACTION WaitVScan=16

// Stop and rotate a certain number of degrees clockwise
// RobotAction: Turn
//	ActionID=3
RACTION Turn=3

// Read the sensor matrix and turn to the most open path. The ActionValue is used to decide which vertical row of sensor cells to use.
// RobotAction: TurnToMostOpen
//	ActionID=13
RACTION TurnToMostOpen=13

// Waits until there is horizontal scan data in row defined by ActionValue
// RobotAction: WaitHScan
//	ActionID=15
RACTION WaitHScan=15

// Stop and set rudder to 0
// RobotAction: Stop
//	ActionID=4
RACTION Stop=4

// A test action that always fails
// RobotAction: Fail
//	ActionID=9
RACTION Fail=9

// Move robot head verically in degrees 0-180
// RobotAction: VMoveHead
//	ActionID=8
RACTION VMoveHead=8

// Set the speed 0-100%
// RobotAction: SetSpeed
//	ActionID=1
RACTION SetSpeed=1

// Move by a certain number of millimeters
// RobotAction: MoveBy
//	ActionID=2
RACTION MoveBy=2

// Reset the distance travelled counter
// RobotAction: ResetDistTrav
//	ActionID=17
RACTION ResetDistTrav=17

// Abort sleep mode
// RobotAction: Wake
//	ActionID=6
RACTION Wake=6

// Read the IR sensors and turns to the most open path by ActionValue degrees. 
// RobotAction: TurnMostOpenDir
//	ActionID=14
RACTION TurnMostOpenDir=14

// Move robot head horizontally in degrees 0-180
// RobotAction: HMoveHead
//	ActionID=7
RACTION HMoveHead=7

// Sleep for ActionValue seconds
// RobotAction: Sleep
//	ActionID=5
RACTION Sleep=5

// Start scanning robot head sensor vertically, once every ActionValue milliseconds
// RobotAction: VScan
//	ActionID=11
RACTION VScan=11

// Start scanning robot head sensor horizontally, once every ActionValue milliseconds
// RobotAction: HScan
//	ActionID=10
RACTION HScan=10

// Just wait at this plan step for ActionValue mS. Useful after starting scanning before deciding what to do.
// RobotAction: Wait
//	ActionID=12
RACTION Wait=12

// *** Output completed. ***
