// *** Instinct Robot Plan generated by dia/instinctgen.py ***
// *** 2016-01-07 21:59:29 C:\Users\rwortham\Documents\Bath\University\Arduino Robot\Instinct-Server\cmd\Plan1.ins

// *** First, clear the old plan and initialise the buffers ***
PLAN R C
// AP=1, APE=5, C=2, CE=6, D=1, A=8
PLAN R I 1 5 2 6 1 8

// *** These are the Plan Elements. ***

// Drive forward, adjusting speed to free space ahead
// Competence: ForwardSafely
// 	Parents: AheadFree
// 	Children: FS4, FS3, FS2, FS1
//	UseORWithinCEGroup=0
PLAN A C 19 0

// Action: Stop
// 	Parents: FS1
//	Action=SetSpeed
//	ActionValue=0
PLAN A A 16 1 0

// Action: AheadMedium
// 	Parents: FS3
//	Action=SetSpeed
//	ActionValue=60
PLAN A A 17 1 60

// ActionPattern: ReverseTurnRight
// 	Parents: AheadBlocked
// 	Children: RTR5, RTR4, RTR3, RTR2, RTR1
PLAN A P 5

// (NULL)
// Action: HeadStraight
// 	Parents: RTR1
//	Action=HMoveHead
//	ActionValue=75
PLAN A A 11 7 75

// (NULL)
// CompetenceElement: AheadBlocked
// 	Parents: ForwardAvoiding
// 	Children: ReverseTurnRight
//	Priority=2
//	RetryLimit=0
//	Sense=FrontRange
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=250
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 4 2 5 2 0 11 3 250 10 0

// ActionPatternElement: RTR2
// 	Parents: ReverseTurnRight
// 	Children: LookAhead
//	Order=2
PLAN A L 7 5 12 2

// ActionPatternElement: RTR3
// 	Parents: ReverseTurnRight
// 	Children: MoveBack
//	Order=3
PLAN A L 8 5 13 3

// ActionPatternElement: RTR4
// 	Parents: ReverseTurnRight
// 	Children: TurnRight
//	Order=4
PLAN A L 9 5 14 4

// ActionPatternElement: RTR5
// 	Parents: ReverseTurnRight
// 	Children: AheadSlow
//	Order=5
PLAN A L 10 5 15 5

// Action: TurnRight
// 	Parents: RTR4
//	Action=Turn
//	ActionValue=90
PLAN A A 14 3 90

// Action: MoveBack
// 	Parents: RTR3
//	Action=MoveBy
//	ActionValue=-150
PLAN A A 13 2 -150

// (NULL)
// CompetenceElement: AheadFree
// 	Parents: ForwardAvoiding
// 	Children: ForwardSafely
//	Priority=3
//	RetryLimit=0
//	Sense=FrontRange
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=250
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 3 2 19 3 0 11 2 250 10 0

// (NULL)
// Action: AheadFull
// 	Parents: FS4
//	Action=SetSpeed
//	ActionValue=100
PLAN A A 18 1 100

// Drive forward, avoiding objects as they are sensed
// Competence: ForwardAvoiding
// 	Parents: Roam
// 	Children: AheadBlocked, AheadFree
//	UseORWithinCEGroup=0
PLAN A C 2 0

// Template for Drives
// Drive: Roam
// 	Children: ForwardAvoiding
//	Priority=100
//	Sense=Sleeping
//	Comparator=EQ	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A D 1 2 100 0 8 0 0 0 0 0 0 0

// Action: AheadSlow
// 	Parents: RTR5, FS2
//	Action=SetSpeed
//	ActionValue=40
PLAN A A 15 1 40

// (NULL)
// Action: LookAhead
// 	Parents: RTR2
//	Action=VMoveHead
//	ActionValue=175
PLAN A A 12 8 175

// (NULL)
// CompetenceElement: FS1
// 	Parents: ForwardSafely
// 	Children: Stop
//	Priority=1
//	Sense=FrontRange
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=240
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 20 19 16 1 0 11 3 240 10 0

// (NULL)
// CompetenceElement: FS2
// 	Parents: ForwardSafely
// 	Children: AheadSlow
//	Priority=2
//	Sense=FrontRange
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=260
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 21 19 15 2 0 11 2 260 10 0

// (NULL)
// CompetenceElement: FS3
// 	Parents: ForwardSafely
// 	Children: AheadMedium
//	Priority=3
//	Sense=FrontRange
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=300
//	SenseHysteresis=10
//	SenseFlexLatchHysteresis=0
PLAN A E 22 19 17 3 0 11 2 300 10 0

// (NULL)
// CompetenceElement: FS4
// 	Parents: ForwardSafely
// 	Children: AheadFull
//	Priority=4
//	Sense=FrontRange
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=350
//	SenseHysteresis=15
//	SenseFlexLatchHysteresis=0
PLAN A E 23 19 18 4 0 11 2 350 15 0

// ActionPatternElement: RTR1
// 	Parents: ReverseTurnRight
// 	Children: HeadStraight
//	Order=1
PLAN A L 6 5 11 1

// *** Plan Element Names follow ... ***

// Drive forward, adjusting speed to free space ahead
// Competence: ForwardSafely
PELEM ForwardSafely=19

// Action: Stop
PELEM Stop=16

// Action: AheadMedium
PELEM AheadMedium=17

// ActionPattern: ReverseTurnRight
PELEM ReverseTurnRight=5

// (NULL)
// Action: HeadStraight
PELEM HeadStraight=11

// (NULL)
// CompetenceElement: AheadBlocked
PELEM AheadBlocked=4

// ActionPatternElement: RTR2
PELEM RTR2=7

// ActionPatternElement: RTR3
PELEM RTR3=8

// ActionPatternElement: RTR4
PELEM RTR4=9

// ActionPatternElement: RTR5
PELEM RTR5=10

// Action: TurnRight
PELEM TurnRight=14

// Action: MoveBack
PELEM MoveBack=13

// (NULL)
// CompetenceElement: AheadFree
PELEM AheadFree=3

// (NULL)
// Action: AheadFull
PELEM AheadFull=18

// Drive forward, avoiding objects as they are sensed
// Competence: ForwardAvoiding
PELEM ForwardAvoiding=2

// Template for Drives
// Drive: Roam
PELEM Roam=1

// Action: AheadSlow
PELEM AheadSlow=15

// (NULL)
// Action: LookAhead
PELEM LookAhead=12

// (NULL)
// CompetenceElement: FS1
PELEM FS1=20

// (NULL)
// CompetenceElement: FS2
PELEM FS2=21

// (NULL)
// CompetenceElement: FS3
PELEM FS3=22

// (NULL)
// CompetenceElement: FS4
PELEM FS4=23

// ActionPatternElement: RTR1
PELEM RTR1=6

// *** Plan output complete. RobotSenses and RobotActions follow ... ***

// Rear virtual sensor calculated from (RearRight + RearLeft)/2  - max 420mm
// RobotSense: IR_Rear
//	SenseID=6
RSENSE IR_Rear=6

// Returns ID of edge nearest to an obstacle (0-3), or 4 if no obstacle detected
// RobotSense: IR_NearestEdge
//	SenseID=16
RSENSE IR_NearestEdge=16

// Front virtual sensor calculated from (FrontLeft + RearLeft)/2  - max 420mm
// RobotSense: IR_Left
//	SenseID=13
RSENSE IR_Left=13

// Front virtual sensor calculated from (FrontRight + RearRight)/2  - max 420mm
// RobotSense: IR_Right
//	SenseID=14
RSENSE IR_Right=14

// Just a random number 1-100
// RobotSense: Random
//	SenseID=7
RSENSE Random=7

// Rear right IR sensor - max 600mm
// RobotSense: IR_RearRight
//	SenseID=4
RSENSE IR_RearRight=4

// Rear left IR sensor - max 600mm
// RobotSense: IR_RearLeft
//	SenseID=3
RSENSE IR_RearLeft=3

// Always returns 50 - Good for testing
// RobotSense: Fifty
//	SenseID=9
RSENSE Fifty=9

// Front virtual sensor calculated from (FrontRight + FrontLeft)/2  - max 420mm
// RobotSense: IR_Front
//	SenseID=5
RSENSE IR_Front=5

// Ultrasonic range finder mounted on head. 0mm to 5000mm
// RobotSense: RangeFinder
//	SenseID=10
RSENSE RangeFinder=10

// Minimum of IR_FrontLeft, IR_FrontRight and RangeFinder
// RobotSense: FrontRange
//	SenseID=11
RSENSE FrontRange=11

// Sum of drive motor currents in mA
// RobotSense: MotorCurrent
//	SenseID=17
RSENSE MotorCurrent=17

// Front right IR sensor - max 600mm
// RobotSense: IR_FrontRight
//	SenseID=1
RSENSE IR_FrontRight=1

// Front left IR sensor - max 600mm
// RobotSense: IR_FrontLeft
//	SenseID=2
RSENSE IR_FrontLeft=2

// 1 if robot is sleeping
// RobotSense: Sleeping
//	SenseID=8
RSENSE Sleeping=8

// PIR sensor mounted on head. Can sense humans but also sometimes triggers when its moved.
// RobotSense: PIR
//	SenseID=12
RSENSE PIR=12

// Returns ID of corner nearest to an obstacle (0-3), or 4 if no obstacle detected
// RobotSense: IR_NearestCorner
//	SenseID=15
RSENSE IR_NearestCorner=15

// Stop and rotate a certain number of degrees clockwise
// RobotAction: Turn
//	ActionID=3
RACTION Turn=3

// Stop and set rudder to 0
// RobotAction: Stop
//	ActionID=4
RACTION Stop=4

// A test action that always fails
// RobotAction: Fail
//	ActionID=9
RACTION Fail=9

// Move robot head verically in degrees 0-180
// RobotAction: VMoveHead
//	ActionID=8
RACTION VMoveHead=8

// Set the speed 0-100%
// RobotAction: SetSpeed
//	ActionID=1
RACTION SetSpeed=1

// Move by a certain number of millimeters
// RobotAction: MoveBy
//	ActionID=2
RACTION MoveBy=2

// Abort sleep mode
// RobotAction: Wake
//	ActionID=6
RACTION Wake=6

// Move robot head horizontally in degrees 0-180
// RobotAction: HMoveHead
//	ActionID=7
RACTION HMoveHead=7

// Sleep for ActionValue seconds
// RobotAction: Sleep
//	ActionID=5
RACTION Sleep=5

// *** Output completed. ***
